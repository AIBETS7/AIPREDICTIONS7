#!/usr/bin/env python3
"""
Script de prueba para el Bot de C√≥rners
Demuestra el an√°lisis sofisticado de c√≥rners considerando equipos, rivales y estad√≠sticas
"""

from corners_bot import CornersBot, run_corners_bot

def test_individual_analysis():
    """Prueba el an√°lisis individual de partidos"""
    print("ü§ñ PRUEBA DEL BOT DE C√ìRNERS - AN√ÅLISIS INDIVIDUAL")
    print("=" * 60)
    
    bot = CornersBot()
    
    # Casos de prueba espec√≠ficos
    test_matches = [
        ("Real Madrid", "Barcelona"),  # Cl√°sico - equipos ofensivos
        ("Atletico Madrid", "Sevilla"),  # Atl√©tico defensivo vs Sevilla ofensivo
        ("Real Betis", "Valencia"),  # Dos equipos de medio nivel
        ("Barcelona", "Atletico Madrid"),  # Ofensivo vs Defensivo
    ]
    
    for i, (home, away) in enumerate(test_matches, 1):
        print(f"\nüèüÔ∏è AN√ÅLISIS #{i}: {home} vs {away}")
        print("-" * 40)
        
        prediction = bot.analyze_match_corners(home, away)
        
        print(f"Predicci√≥n total: {prediction.predicted_total_corners} c√≥rners")
        print(f"Confianza: {prediction.confidence}%")
        print(f"C√≥rners {home}: {prediction.home_team_corners}")
        print(f"C√≥rners {away}: {prediction.away_team_corners}")
        print(f"¬øApostar?: {'‚úÖ S√ç' if bot.should_bet(prediction) else '‚ùå NO'}")
        
        print("\nüìä FACTORES:")
        for factor, value in prediction.factors.items():
            print(f"  ‚Ä¢ {factor}: {value:.3f}")
        
        print(f"\nüìù AN√ÅLISIS COMPLETO:")
        print(prediction.analysis)
        print("\n" + "="*60)

def test_team_statistics():
    """Muestra las estad√≠sticas de los equipos"""
    print("\nüìä ESTAD√çSTICAS DE EQUIPOS")
    print("=" * 60)
    
    bot = CornersBot()
    
    for team_name, stats in bot.teams_stats.items():
        print(f"\nüèÜ {team_name}")
        print(f"  Local - C√≥rners a favor: {stats.home_avg_for:.1f} | En contra: {stats.home_avg_against:.1f}")
        print(f"  Visitante - C√≥rners a favor: {stats.away_avg_for:.1f} | En contra: {stats.away_avg_against:.1f}")
        print(f"  Total promedio local: {stats.total_home_avg:.1f}")
        print(f"  Total promedio visitante: {stats.total_away_avg:.1f}")

def test_configuration_impact():
    """Prueba c√≥mo afectan diferentes configuraciones"""
    print("\n‚öôÔ∏è PRUEBA DE CONFIGURACIONES")
    print("=" * 60)
    
    # Configuraci√≥n conservadora
    print("\nüîí CONFIGURACI√ìN CONSERVADORA (Umbral 80%, Min 11 c√≥rners)")
    bot = CornersBot()
    bot.config['confidence_threshold'] = 80
    bot.config['min_corners'] = 11
    
    picks = bot.get_picks_for_matches([
        {'home_team': 'Real Madrid', 'away_team': 'Barcelona', 'match_time': '20:00', 'competition': 'La Liga'},
        {'home_team': 'Atletico Madrid', 'away_team': 'Sevilla', 'match_time': '18:00', 'competition': 'La Liga'},
        {'home_team': 'Real Betis', 'away_team': 'Valencia', 'match_time': '16:00', 'competition': 'La Liga'},
    ])
    print(f"Picks generados: {len(picks)}")
    for pick in picks:
        print(f"  ‚Ä¢ {pick['home_team']} vs {pick['away_team']} - {pick['confidence']:.1f}% - {pick['predicted_total']} c√≥rners")
    
    # Configuraci√≥n agresiva
    print("\nüî• CONFIGURACI√ìN AGRESIVA (Umbral 60%, Min 8 c√≥rners)")
    bot.config['confidence_threshold'] = 60
    bot.config['min_corners'] = 8
    
    picks = bot.get_picks_for_matches([
        {'home_team': 'Real Madrid', 'away_team': 'Barcelona', 'match_time': '20:00', 'competition': 'La Liga'},
        {'home_team': 'Atletico Madrid', 'away_team': 'Sevilla', 'match_time': '18:00', 'competition': 'La Liga'},
        {'home_team': 'Real Betis', 'away_team': 'Valencia', 'match_time': '16:00', 'competition': 'La Liga'},
    ])
    print(f"Picks generados: {len(picks)}")
    for pick in picks:
        print(f"  ‚Ä¢ {pick['home_team']} vs {pick['away_team']} - {pick['confidence']:.1f}% - {pick['predicted_total']} c√≥rners")

def demonstrate_vs_analysis():
    """Demuestra el an√°lisis de equipos vs rivales espec√≠ficos"""
    print("\nüÜö AN√ÅLISIS EQUIPO vs RIVAL")
    print("=" * 60)
    
    bot = CornersBot()
    
    # Real Madrid como local vs diferentes rivales
    rivals = ['Barcelona', 'Atletico Madrid', 'Sevilla', 'Valencia']
    
    print("\nüè† REAL MADRID (LOCAL) vs DIFERENTES RIVALES:")
    for rival in rivals:
        corners, analysis = bot.calculate_team_vs_opponent_corners('Real Madrid', rival, True)
        print(f"  vs {rival}: {corners:.1f} c√≥rners esperados")
        print(f"    ‚Üí {analysis}")
    
    # Barcelona como visitante vs diferentes rivales
    print("\n‚úàÔ∏è BARCELONA (VISITANTE) vs DIFERENTES RIVALES:")
    for rival in rivals:
        if rival != 'Barcelona':
            corners, analysis = bot.calculate_team_vs_opponent_corners('Barcelona', rival, False)
            print(f"  @ {rival}: {corners:.1f} c√≥rners esperados")
            print(f"    ‚Üí {analysis}")

def main():
    """Funci√≥n principal que ejecuta todas las pruebas"""
    print("üöÄ INICIANDO PRUEBAS DEL BOT DE C√ìRNERS")
    print("Este bot analiza:")
    print("‚Ä¢ Media de c√≥rners de cada equipo como local/visitante")
    print("‚Ä¢ C√≥rners que concede cada equipo")
    print("‚Ä¢ An√°lisis espec√≠fico del rival")
    print("‚Ä¢ Factores de estilo de juego, forma y rivalidad")
    print("‚Ä¢ Predicci√≥n total con nivel de confianza")
    
    # Ejecutar todas las pruebas
    test_team_statistics()
    test_individual_analysis()
    demonstrate_vs_analysis()
    test_configuration_impact()
    
    print("\nüéØ EJEMPLO COMPLETO CON PICKS FINALES")
    print("=" * 60)
    run_corners_bot()

if __name__ == "__main__":
    main()