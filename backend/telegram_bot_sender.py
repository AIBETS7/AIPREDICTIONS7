#!/usr/bin/env python3
"""
Telegram Bot Sender - Env√≠o Autom√°tico de Picks por Bot
=======================================================

Sistema para enviar el pick de mayor confianza de cada bot
a su respectivo canal de Telegram.
"""

import requests
import json
import os
from datetime import datetime
from typing import Dict, List, Optional
from match_data_loader import get_matches_for_bots
from cards_bot import CardsBot
from corners_bot import CornersBot
from draws_bot import DrawsBot
from both_teams_score_bot import BothTeamsScoreBot

# Configuraci√≥n de Telegram
TELEGRAM_CONFIG = {
    'bot_token': '7582466483:AAHshXjaU0vu2nZsYd8wSY5pR1XJ6EHmZOQ',
    'channels': {
        'tarjetas': {
            'chat_id': '2070545442',  # ACTUALIZAR: Chat ID del grupo de Bot Tarjetas
            'name': 'üü® Bot Tarjetas',
            'emoji': 'üü®'
        },
        'corneres': {
            'chat_id': '2070545442',  # ACTUALIZAR: Chat ID del grupo de Bot C√≥rners
            'name': '‚öΩ Bot C√≥rners',
            'emoji': '‚öΩ'
        },
        'empates': {
            'chat_id': '2070545442',  # ACTUALIZAR: Chat ID del grupo de Bot Empates
            'name': 'ü§ù Bot Empates',
            'emoji': 'ü§ù'
        },
        'ambos_marcan': {
            'chat_id': '2070545442',  # ACTUALIZAR: Chat ID del grupo de Bot Ambos Marcan
            'name': 'üéØ Bot Ambos Marcan',
            'emoji': 'üéØ'
        }
    }
}

def send_telegram_message(chat_id: str, message: str) -> bool:
    """
    Env√≠a un mensaje a un canal de Telegram
    """
    if chat_id.startswith('CHAT_ID_'):
        print(f"‚ö†Ô∏è Chat ID no configurado: {chat_id}")
        return False
    
    url = f"https://api.telegram.org/bot{TELEGRAM_CONFIG['bot_token']}/sendMessage"
    
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "Markdown"
    }
    
    try:
        response = requests.post(url, json=payload, timeout=30)
        
        if response.status_code == 200:
            print(f"‚úÖ Mensaje enviado exitosamente a {chat_id}")
            return True
        else:
            print(f"‚ùå Error enviando mensaje: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False

def format_pick_message(pick: Dict, bot_info: Dict) -> str:
    """
    Formatea un pick para env√≠o por Telegram
    """
    emoji = bot_info['emoji']
    bot_name = bot_info['name']
    
    # Informaci√≥n b√°sica del partido
    home_team = pick['home_team']
    away_team = pick['away_team']
    competition = pick.get('competition', 'Competici√≥n')
    match_time = pick.get('match_time', 'Hora no disponible')
    confidence = pick['confidence']
    odds = pick.get('odds', 'N/A')
    
    # Mensaje base
    message = f"{emoji} *{bot_name}*\n"
    message += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    message += f"üèÜ *{competition}*\n"
    message += f"‚öΩ *{home_team}* vs *{away_team}*\n"
    message += f"üìÖ {match_time}\n\n"
    
    # Informaci√≥n espec√≠fica por tipo de bot
    if 'predicted_total' in pick:
        if 'tarjetas' in bot_name.lower():
            message += f"üü® *Predicci√≥n*: {pick['predicted_total']} tarjetas\n"
            if pick.get('referee'):
                message += f"üë®‚Äç‚öñÔ∏è *√Årbitro*: {pick['referee']}\n"
        elif 'c√≥rner' in bot_name.lower():
            message += f"‚öΩ *Predicci√≥n*: {pick['predicted_total']} c√≥rners\n"
    
    if 'draw_probability' in pick:
        message += f"ü§ù *Probabilidad de empate*: {pick['draw_probability']:.1f}%\n"
    
    if 'btts_probability' in pick:
        message += f"üéØ *Probabilidad BTTS*: {pick['btts_probability']:.1f}%\n"
    
    # M√©tricas
    message += f"\nüìä *Confianza*: {confidence}%\n"
    message += f"üí∞ *Cuota estimada*: {odds}\n\n"
    
    # An√°lisis (truncado si es muy largo)
    if pick.get('reasoning'):
        analysis = pick['reasoning']
        if len(analysis) > 200:
            analysis = analysis[:200] + "..."
        message += f"üìà *An√°lisis*: {analysis}\n\n"
    
    # Footer
    message += f"ü§ñ *AI Predictions 7*\n"
    message += f"‚è∞ {datetime.now().strftime('%H:%M')} - {datetime.now().strftime('%d/%m/%Y')}"
    
    return message

def get_best_pick_from_bot(bot_name: str, matches: List[Dict]) -> Optional[Dict]:
    """
    Obtiene el pick de mayor confianza de un bot espec√≠fico
    """
    try:
        if bot_name == 'tarjetas':
            bot = CardsBot()
            picks = bot.get_picks_for_matches(matches)
        elif bot_name == 'corneres':
            bot = CornersBot()
            picks = bot.get_picks_for_matches(matches)
        elif bot_name == 'empates':
            bot = DrawsBot()
            picks = bot.get_picks_for_matches(matches)
        elif bot_name == 'ambos_marcan':
            bot = BothTeamsScoreBot()
            picks = bot.get_picks_for_matches(matches)
        else:
            print(f"‚ùå Bot desconocido: {bot_name}")
            return None
        
        if picks:
            # Los picks ya vienen ordenados por confianza (descendente)
            best_pick = picks[0]
            print(f"‚úÖ {bot_name}: Mejor pick con {best_pick['confidence']}% confianza")
            return best_pick
        else:
            print(f"‚ö†Ô∏è {bot_name}: No hay picks disponibles")
            return None
            
    except Exception as e:
        print(f"‚ùå Error obteniendo picks de {bot_name}: {e}")
        return None

def send_all_bot_picks():
    """
    Env√≠a el mejor pick de cada bot a su respectivo canal de Telegram
    """
    print("üöÄ INICIANDO ENV√çO DE PICKS A TELEGRAM")
    print("=" * 60)
    
    # Cargar partidos
    print("üìä Cargando partidos...")
    matches = get_matches_for_bots(competitions=None, with_referees=True)
    print(f"‚úÖ {len(matches)} partidos cargados")
    
    if not matches:
        print("‚ùå No hay partidos disponibles")
        return
    
    results = {
        'sent': 0,
        'failed': 0,
        'no_picks': 0
    }
    
    # Procesar cada bot
    for bot_key, channel_info in TELEGRAM_CONFIG['channels'].items():
        print(f"\n{channel_info['emoji']} Procesando {channel_info['name']}...")
        
        # Obtener mejor pick del bot
        best_pick = get_best_pick_from_bot(bot_key, matches)
        
        if best_pick:
            # Formatear mensaje
            message = format_pick_message(best_pick, channel_info)
            
            # Enviar a Telegram
            chat_id = channel_info['chat_id']
            success = send_telegram_message(chat_id, message)
            
            if success:
                results['sent'] += 1
                print(f"‚úÖ Pick enviado: {best_pick['home_team']} vs {best_pick['away_team']}")
            else:
                results['failed'] += 1
        else:
            results['no_picks'] += 1
    
    # Resumen final
    print(f"\nüìä RESUMEN DE ENV√çOS:")
    print(f"‚úÖ Enviados exitosamente: {results['sent']}")
    print(f"‚ùå Fallos en env√≠o: {results['failed']}")
    print(f"‚ö†Ô∏è Sin picks disponibles: {results['no_picks']}")
    print(f"ü§ñ Total bots procesados: {len(TELEGRAM_CONFIG['channels'])}")

def test_telegram_connections():
    """
    Prueba la conexi√≥n con todos los canales de Telegram
    """
    print("üîç PROBANDO CONEXIONES DE TELEGRAM")
    print("=" * 50)
    
    test_message = "üß™ *Mensaje de Prueba*\n\nSistema de bots funcionando correctamente ‚úÖ"
    
    for bot_key, channel_info in TELEGRAM_CONFIG['channels'].items():
        print(f"\n{channel_info['emoji']} Probando {channel_info['name']}...")
        
        chat_id = channel_info['chat_id']
        success = send_telegram_message(chat_id, test_message)
        
        if success:
            print(f"‚úÖ Conexi√≥n exitosa")
        else:
            print(f"‚ùå Fallo en conexi√≥n")

def show_configuration():
    """
    Muestra la configuraci√≥n actual de Telegram
    """
    print("‚öôÔ∏è CONFIGURACI√ìN ACTUAL DE TELEGRAM")
    print("=" * 50)
    print(f"ü§ñ Bot Token: {TELEGRAM_CONFIG['bot_token'][:20]}...")
    print(f"\nüì± Canales configurados:")
    
    for bot_key, channel_info in TELEGRAM_CONFIG['channels'].items():
        chat_id = channel_info['chat_id']
        status = "‚ùå No configurado" if chat_id.startswith('CHAT_ID_') else "‚úÖ Configurado"
        print(f"  {channel_info['emoji']} {channel_info['name']}: {status}")
        print(f"     Chat ID: {chat_id}")

def update_chat_ids(chat_ids: Dict[str, str]):
    """
    Actualiza los chat IDs de los canales
    """
    for bot_key, chat_id in chat_ids.items():
        if bot_key in TELEGRAM_CONFIG['channels']:
            TELEGRAM_CONFIG['channels'][bot_key]['chat_id'] = chat_id
            print(f"‚úÖ Actualizado {bot_key}: {chat_id}")
        else:
            print(f"‚ùå Bot desconocido: {bot_key}")

def main():
    """
    Funci√≥n principal
    """
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == 'test':
            test_telegram_connections()
        elif command == 'config':
            show_configuration()
        elif command == 'send':
            send_all_bot_picks()
        else:
            print("‚ùå Comando desconocido. Usa: test, config, o send")
    else:
        # Comportamiento por defecto: enviar picks
        send_all_bot_picks()

if __name__ == "__main__":
    main()