#!/usr/bin/env python3
"""
Test del Bot de C√≥rners SIN FILTRO de C√≥rners M√≠nimos
- Solo confianza ‚â• 70%
- Solo cuota ‚â• 1.5
- TODOS los picks con valor
"""

from corners_bot import CornersBot

def test_no_corners_filter():
    """Prueba el bot sin filtro de c√≥rners m√≠nimos"""
    print("üéØ BOT DE C√ìRNERS - SIN FILTRO DE C√ìRNERS M√çNIMOS")
    print("=" * 70)
    print("‚úÖ Solo confianza ‚â• 70%")
    print("‚úÖ Solo cuota ‚â• 1.5")
    print("‚úÖ TODOS los picks con valor (sin importar n√∫mero de c√≥rners)")
    print("‚úÖ Sin l√≠mite diario")
    print("=" * 70)
    
    bot = CornersBot()
    
    # Verificar configuraci√≥n
    print(f"\nüìã CONFIGURACI√ìN ACTUAL:")
    print(f"‚Ä¢ Cuota m√≠nima: {bot.config.get('min_odds', 1.5)}")
    print(f"‚Ä¢ Confianza m√≠nima: {bot.config.get('confidence_threshold', 70)}%")
    print(f"‚Ä¢ Filtro c√≥rners: ELIMINADO ‚ùå")
    print(f"‚Ä¢ Picks por d√≠a: {bot.config.get('max_picks_per_day', 999)}")
    
    # Lista amplia de partidos para probar
    test_matches = [
        {'home_team': 'Real Madrid', 'away_team': 'Barcelona', 'match_time': '20:00', 'competition': 'La Liga'},
        {'home_team': 'Atletico Madrid', 'away_team': 'Sevilla', 'match_time': '18:00', 'competition': 'La Liga'},
        {'home_team': 'Real Betis', 'away_team': 'Valencia', 'match_time': '16:00', 'competition': 'La Liga'},
        {'home_team': 'Barcelona', 'away_team': 'Real Betis', 'match_time': '21:00', 'competition': 'La Liga'},
        {'home_team': 'Sevilla', 'away_team': 'Real Madrid', 'match_time': '19:00', 'competition': 'La Liga'},
        {'home_team': 'Valencia', 'away_team': 'Atletico Madrid', 'match_time': '17:00', 'competition': 'La Liga'},
        {'home_team': 'Real Betis', 'away_team': 'Barcelona', 'match_time': '15:00', 'competition': 'La Liga'},
        {'home_team': 'Real Madrid', 'away_team': 'Atletico Madrid', 'match_time': '22:00', 'competition': 'La Liga'},
    ]
    
    print(f"\nüîç ANALIZANDO {len(test_matches)} PARTIDOS...")
    print("=" * 70)
    
    # Analizar cada partido individualmente
    valid_picks = []
    rejected_picks = []
    
    for i, match in enumerate(test_matches, 1):
        home = match['home_team']
        away = match['away_team']
        
        print(f"\nüèüÔ∏è PARTIDO #{i}: {home} vs {away}")
        print("-" * 50)
        
        prediction = bot.analyze_match_corners(home, away)
        estimated_odds = bot.estimate_odds(prediction.predicted_total_corners)
        
        print(f"Predicci√≥n: {prediction.predicted_total_corners} c√≥rners")
        print(f"Confianza: {prediction.confidence}%")
        print(f"Cuota estimada: {estimated_odds}")
        
        # Verificar solo los 2 criterios restantes
        confidence_ok = prediction.confidence >= bot.config.get('confidence_threshold', 70)
        odds_ok = estimated_odds >= bot.config.get('min_odds', 1.5)
        
        print(f"‚úì Confianza (‚â•70%): {'‚úÖ' if confidence_ok else '‚ùå'} {prediction.confidence}%")
        print(f"‚úì Cuota (‚â•1.5): {'‚úÖ' if odds_ok else '‚ùå'} {estimated_odds}")
        print(f"‚úì C√≥rners: ‚úÖ {prediction.predicted_total_corners} (SIN FILTRO)")
        
        if bot.should_bet(prediction):
            print("üéØ RESULTADO: ‚úÖ PICK V√ÅLIDO - Se env√≠a")
            valid_picks.append({
                'match': f"{home} vs {away}",
                'corners': prediction.predicted_total_corners,
                'confidence': prediction.confidence,
                'odds': estimated_odds
            })
        else:
            print("üéØ RESULTADO: ‚ùå RECHAZADO - No cumple criterios")
            rejected_picks.append({
                'match': f"{home} vs {away}",
                'corners': prediction.predicted_total_corners,
                'confidence': prediction.confidence,
                'odds': estimated_odds,
                'reason': 'Confianza' if not confidence_ok else 'Cuota'
            })
    
    # Generar picks finales usando el m√©todo del bot
    final_picks = bot.get_picks_for_matches(test_matches)
    
    print(f"\nüìä RESUMEN FINAL")
    print("=" * 70)
    print(f"üéØ Partidos analizados: {len(test_matches)}")
    print(f"‚úÖ Picks v√°lidos: {len(valid_picks)}")
    print(f"‚ùå Picks rechazados: {len(rejected_picks)}")
    print(f"üì§ Picks que se env√≠an: {len(final_picks)}")
    
    if valid_picks:
        print(f"\n‚úÖ PICKS V√ÅLIDOS QUE SE ENV√çAN:")
        for i, pick in enumerate(valid_picks, 1):
            print(f"{i}. {pick['match']}")
            print(f"   üìä {pick['corners']} c√≥rners | {pick['confidence']}% conf | {pick['odds']} cuota")
    
    if rejected_picks:
        print(f"\n‚ùå PICKS RECHAZADOS:")
        for i, pick in enumerate(rejected_picks, 1):
            print(f"{i}. {pick['match']} - Rechazado por: {pick['reason']}")
            print(f"   üìä {pick['corners']} c√≥rners | {pick['confidence']}% conf | {pick['odds']} cuota")
    
    print(f"\nüöÄ PICKS FINALES GENERADOS POR EL BOT:")
    print("=" * 70)
    
    if final_picks:
        for i, pick in enumerate(final_picks, 1):
            print(f"\n--- PICK #{i} ---")
            print(f"üèüÔ∏è {pick['home_team']} vs {pick['away_team']}")
            print(f"üìä Predicci√≥n: {pick['prediction']}")
            print(f"üéØ {pick['confidence']}% confianza")
            print(f"üí∞ {pick['odds']} cuota estimada")
            print(f"‚è∞ {pick['match_time']} - {pick['competition']}")
    else:
        print("‚ùå No se generaron picks v√°lidos con los criterios actuales")
    
    # Mostrar comparaci√≥n con sistema anterior
    print(f"\nüìà COMPARACI√ìN CON SISTEMA ANTERIOR:")
    print("=" * 70)
    print("üî¥ ANTES (con filtro ‚â•9 c√≥rners):")
    old_valid = [p for p in valid_picks if p['corners'] >= 9]
    print(f"   ‚Ä¢ Picks v√°lidos: {len(old_valid)}")
    
    print("üü¢ AHORA (sin filtro de c√≥rners):")
    print(f"   ‚Ä¢ Picks v√°lidos: {len(valid_picks)}")
    print(f"   ‚Ä¢ Diferencia: +{len(valid_picks) - len(old_valid)} picks adicionales")
    
    # Mostrar picks que antes se habr√≠an rechazado por c√≥rners
    new_picks = [p for p in valid_picks if p['corners'] < 9]
    if new_picks:
        print(f"\nüÜï PICKS NUEVOS (antes rechazados por <9 c√≥rners):")
        for pick in new_picks:
            print(f"   ‚Ä¢ {pick['match']}: {pick['corners']} c√≥rners, {pick['confidence']}% conf, {pick['odds']} cuota")
    
    print(f"\nüéâ CONCLUSI√ìN:")
    print("=" * 70)
    print("‚úÖ El bot ahora env√≠a TODOS los picks que cumplan:")
    print("   ‚Ä¢ ‚â•70% confianza")
    print("   ‚Ä¢ ‚â•1.5 cuota estimada")
    print("‚ùå Ya NO filtra por n√∫mero de c√≥rners")
    print("‚úÖ M√°s oportunidades de valor")
    print("‚úÖ Sigue manteniendo calidad (confianza + cuota)")

if __name__ == "__main__":
    test_no_corners_filter()